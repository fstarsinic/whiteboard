@startuml

participant Main1 as "Main Module 1"
participant Main2 as "Main Module 2"
participant SuccessFailureProcessor as "Processor1"
participant RandomEventProcessor as "Processor2"
participant EventMediator
participant EventMonitor
database Redis

Main1 -> EventMediator : create()
Main2 -> EventMediator : create()

Main1 -> EventMonitor : create(mediator)
EventMediator -> EventMonitor : setMonitor
EventMediator -> EventMediator : bind notifyStateChange

Main1 -> SuccessFailureProcessor : create(moduleId = "Module1")
Main2 -> RandomEventProcessor : create(moduleId = "Module2")

group Execution of Processor1
    Main1 -> EventMediator : notifyStateChange({moduleId: "Module1", message: "Starting execution"})
    Main1 -> SuccessFailureProcessor : execute()
    loop Processing Loop
        SuccessFailureProcessor -> EventMediator : notifyStateChange({moduleId: "Module1", state: {...}})
        EventMediator -> EventMonitor : updateToRedis({moduleId: "Module1", state: {...}})
        EventMonitor -> Redis : store data
    end
    Main1 -> EventMediator : notifyStateChange({moduleId: "Module1", message: "Finished execution"})
end

group Execution of Processor2
    Main2 -> EventMediator : notifyStateChange({moduleId: "Module2", message: "Starting execution"})
    Main2 -> RandomEventProcessor : execute()
    loop Processing Loop
        RandomEventProcessor -> EventMediator : notifyStateChange({moduleId: "Module2", state: {...}})
        EventMediator -> EventMonitor : updateToRedis({moduleId: "Module2", state: {...}})
        EventMonitor -> Redis : store data
    end
    Main2 -> EventMediator : notifyStateChange({moduleId: "Module2", message: "Finished execution"})
end

@enduml
